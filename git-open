#!/bin/bash
set -eu

if ! command -v git &> /dev/null; then
    echo "Error: git is not installed."
    exit 1
fi

if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    echo "Error: Not inside a git repository."
    exit 1
fi

usage() {
    cat << EOF  
Usage: $0 [-h] [-v] [-p] [-b branch] [file_path[:line_number]] [line_number]
Open the git repository in the browser.

-h Display this help
-v Verbose mode. Helpful for debugging. 
-b Specify the branch to open. Default is the current branch.
-p Print only the URL. Do not open the browser.

EOF
}


while getopts "hvpb:" arg; do
    case $arg in
        h) 
            usage
            exit 0
            ;;
        v)
            set -x
            ;;
        b)
            BRANCH=${OPTARG}
            ;;
        p)
            PRINT_ONLY=true
            ;;
        *)
            echo "Error: Invalid argument."
            usage
            exit 1
    esac
done
shift $((OPTIND-1))

URL_TYPE="uknown"
# Get the file path if provided
if [[ -n ${1:-} ]]; then
    # if file path ends with :<line_number>, extract the line number
    if [[ $1 =~ :[0-9]+$ ]]; then
        LINE_NUMBER=${1##*:}
        FILE_PATH=${1%:*}

        if ! [[ $LINE_NUMBER =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid line number."
            exit 1
        fi

        if [[ -n ${2:-} ]]; then
            echo "Error: Too many arguments."
            exit 1
        fi
    else
        if [[ -n ${2:-} ]]; then
            LINE_NUMBER=${2}
        fi
        FILE_PATH=$1
    fi

    # check if path is a directory
    if [[ -d $FILE_PATH ]]; then
        if [[ -n ${LINE_NUMBER:-} ]]; then
            echo "Error: Cannot specify line number for a directory."
            exit 1
        fi
    fi
    GIT_FILE_PATH=$(realpath --relative-to="$(git rev-parse --show-toplevel)" "$FILE_PATH")

    # Check if the file exists in the repo
    if ! git ls-files --error-unmatch --full-name "$FILE_PATH" &> /dev/null; then
        echo "Error: File not found in the git repository."
        exit 1
    fi

    URL_TYPE="file"
else
    # If no file path is provided, open the repo root
    URL_TYPE="root"
fi

REMOTE_URL=$(git config --get remote.origin.url)
REPO_URL=${REMOTE_URL%.git}
REMOTE_HEAD_BRANCH=$(git branch -r | grep origin/HEAD | sed 's/.*-> origin\///')
if [ "${URL_TYPE:-}" == "file" ]; then
    # current_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ -z "${BRANCH:-}" ]]; then
        BRANCH=${REMOTE_HEAD_BRANCH}
    fi
    if [[ -n "${LINE_NUMBER:-}" ]]; then
        URL="${REPO_URL}/blob/${BRANCH}/${GIT_FILE_PATH}#L${LINE_NUMBER}"
    else
        URL="${REPO_URL}/blob/${BRANCH}/${GIT_FILE_PATH}"
    fi
elif [[ $URL_TYPE == "root" ]]; then
    if [[ -n "${BRANCH:-}" ]]; then
        URL="${REPO_URL}/tree/${BRANCH}"
    else
        URL="${REPO_URL}"
    fi
else
    echo "Error: Invalid URL type."
    exit 1
fi


if [[ -n "${PRINT_ONLY:-}" ]]; then
    echo "$URL"
else
    open "$URL"
fi
